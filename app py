app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500 MB

import os
from flask import Flask, request, send_file, after_this_request
from prueba import CubitCompressor

app = Flask(__name__)
compressor = CubitCompressor()

@app.route('/')
def index():
    return send_file('index.html')

@app.route('/compress', methods=['POST'])
def compress():
    if 'file' not in request.files:
        return {'error': 'No file provided'}, 400
    
    file = request.files['file']
    input_path = f'temp_{os.urandom(8).hex()}_{file.filename}'
    output_path = f'compressed_{input_path}.cubit'
    
    file.save(input_path)
    
    try:
        compressor.compress_file(input_path, output_path)
        
        @after_this_request
        def cleanup(response):
            try:
                os.remove(input_path)
                os.remove(output_path)
            except Exception as e:
                app.logger.error(f"Error cleaning files: {e}")
            return response
        
        return send_file(output_path, as_attachment=True)
    except Exception as e:
        return {'error': str(e)}, 500

@app.route('/decompress', methods=['POST'])
def decompress():
    if 'file' not in request.files:
        return {'error': 'No file provided'}, 400
    
    file = request.files['file']
    input_path = f'temp_{os.urandom(8).hex()}_{file.filename}'
    output_path = f'decompressed_{input_path}'
    
    file.save(input_path)
    
    try:
        compressor.decompress_file(input_path, output_path)
        
        @after_this_request
        def cleanup(response):
            try:
                os.remove(input_path)
                os.remove(output_path)
            except Exception as e:
                app.logger.error(f"Error cleaning files: {e}")
            return response
        
        return send_file(output_path, as_attachment=True)
    except Exception as e:
        return {'error': str(e)}, 500

if __name__ == '__main__':
    app.run(debug=True)
